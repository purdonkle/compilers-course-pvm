// Parva non-recursive solution to the Tower of Hanoi problem
// P.D. Terry, Rhodes University, 2016
// Based on a FORTRAN solution in my book "Fortran from Pascal" (1986)

  const infinite = 70;
  bool display;

  void Move(int[] pegFrom, int[] pegTo) {
  // Move the top disk between pegFrom and pegTo towers
    if (display)
      write("Move ", pegFrom[2 + pegFrom[1]], " from ", pegFrom[0], " to ", pegTo[0], "\n");
    pegTo[1] = pegTo[1] + 1;
    pegTo[2 + pegTo[1]] = pegFrom[2 + pegFrom[1]];
    pegFrom[1] = pegFrom[1] - 1;
  } // Move

  void Show(int[] a) { // for debugging
  // display the state of tower a
    write(a[0], a[1], a[2]);   // name, rings, base
    int i = 1;
    while (i <= a[1]) {        // disks in decreasing order of size
      write(a[2 + i]);
      i = i + 1;
    }
    write("\n");
  } // Show

  int Hanoi (int[] a, int[] b, int[] c, int n) {
  // Towers of Hanoi solution - non recursive for n disks
  // Disks start on tower a and end up on tower b, using c as
  // the temporary store.  returns the total number of moves made
    a[0] = 1; a[1] = n; a[2] = infinite;      // n  n-1  n-2  ..... 1
    b[0] = 2; b[1] = 0; b[2] = infinite;
    c[0] = 3; c[1] = 0; c[2] = infinite;
    if (n/2 * 2 == n) { b[0] = 3; c[0] = 2; } // swap roles b/c if n even
    int i = 1;
    while (i <= n) {                          // generate the disk sizes
      a[i + 2] = n + 1 - i;
      i = i + 1;
    }

    Move(a, b);                               // first move
    int count = 1;                            // total number of moves

    while (a[1] + c[1] > 0) {                 // any disks left on a and c?
      bool atoc = a[2 + a[1]] < c[2 + c[1]];  // get round lack of "else"
      if (atoc)  Move(a, c);
      if (!atoc) Move(c, a);
      Move(b, c);                             // and then follow
      count = count + 2;                      // we moved two disks
      int[] safe = a;                         // now cycle the towers
      a = b;
      b = c;
      c = safe;
    } // while
    return count;                             // total number of moves
  } // Hanoi

  void Main() {
    int[]                                     // make the most of the data
      a = new int[infinite + 3],              // structures we do have -
      b = new int[infinite + 3],              // only one-dimensional arrays
      c = new int[infinite + 3];
    int n;
    read("Supply number of disks ", n);
    int iter;
    read("How many iterations ", iter);
    display = iter == 1;
    while (iter > 0) {
      write(Hanoi(a, b, c, n), " moves \n");
      iter = iter - 1;
    }
  } // Main

