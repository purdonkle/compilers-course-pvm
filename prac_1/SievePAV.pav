// Sieve of Eratosthenes for finding primes 2 <= n <= Max (Parva version)
// P.D. Terry,  Rhodes University, 2017

  void main() {
    const Max = 32000;
    bool[] uncrossed = new bool[Max];          // the sieve
    int i, n, k, it, iterations, primes = 0;   // counters
    read("How many iterations? ", iterations);
    bool display = iterations == 1;
    read("Supply largest number to be tested ", n);

    if (n > Max) {
      write("n too large, sorry");
      return;
    }

    write("Prime numbers between 2 and " , n, "\n");
    write("-----------------------------------\n");
    it = 1;	

    while (it <= iterations) {
      primes = 0;
      i = 2;
      while (i <= n) {                         // clear sieve
        uncrossed[i-2] = true;
        i = i + 1;
      }

      i = 2;
      while (i <= n) {                         /* the passes over the sieve */      
		if (uncrossed[i-2]) {
		  int mod = primes - ((primes / 8) * 8);
          if (display && (mod == 0)) write("\n");  // ensure line not too long
          primes = primes + 1;
          if (display) write(i, "\t");
          k = i;           // now cross out multiples of i
          uncrossed[k-2] = false;
          k = k + i;

          while (k <= n) {
			uncrossed[k-2] = false;
			k = k + i;
		  }
        }

		i = i + 1;
      }

      it = it + 1;
      if (display) write("\n");
    }

    write("primes", primes);
  } // Main
  